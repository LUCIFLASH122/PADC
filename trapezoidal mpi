 #include <stdio.h>
 #include <stdlib.h>
 #include <mpi.h>
 #include <math.h>
double f(double x) {
    return x * x;  // Example function: f(x) = x^2
 }
 double trapezoidal_rule(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = (f(a) + f(b)) / 2.0;
    for (int i = 1; i < n; i++) {
        sum += f(a + i * h);
    }
    
    return sum * h;
 }
 int main(int argc, char **argv) {
    int rank, size;
    double a = 0.0;    // Lower limit
    double b = 2.0;    // Upper limit
    int n = 1000000;   // Number of subdivisions
    double local_a, local_b, local_n;
    double local_sum, total_sum;
    
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    // Determine the local range for each process
    local_n = n / size; // Number of trapezoids for each process
    local_a = a + rank * local_n * (b - a) / n;
    local_b = a + (rank + 1) * local_n * (b - a) / n;
    // Calculate local sum using the trapezoidal rule
    local_sum = trapezoidal_rule(local_a, local_b, local_n);
    // Reduce all local sums to total sum at rank 0
    MPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, 
MPI_COMM_WORLD);
    // Rank 0 prints the result
    if (rank == 0) {
        printf("Estimated integral from %.2f to %.2f is: %.10f\n", a, b, total_sum);
    }
    MPI_Finalize();
    return 0;
}
