 #include <mpi.h>
 #include <omp.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <math.h>
 #define N 1000
 void sieve(int start, int end, int *prime) {
 #pragma omp parallel for schedule(dynamic)
    for (int i = 2; i * i <= end; i++) {
        if
 (prime[i]) {
            for (int j = i * i; j <= end; j += i) {
                prime[j] = 0;
            }
        }
    }
 }
 int main(int argc, char *argv[]) {
 int rank, size;
 MPI_Init(&argc, &argv);
 MPI_Comm_rank(MPI_COMM_WORLD, &rank);
 MPI_Comm_size(MPI_COMM_WORLD, &size);
 double start_time = MPI_Wtime(); // Start timing
    int prime[N + 1];
    for (int i = 0; i <= N; i++) prime[i] = 1;
int start = (rank * N) / size + 1;
 int end = ((rank + 1) * N) / size;
    sieve(start, end, prime);
 if (rank == 0) {
        for (int i = 2; i <= N; i++) {
            if
 (prime[i]) {
                printf("%d ", i);
            }
        }
        printf("\n");
    }
 double end_time = MPI_Wtime(); // End timing
 if (rank == 0) {
        printf("Execution Time: %f seconds\n", end_time - start_time);
    }
 MPI_Finalize();
    return 0;
 }
