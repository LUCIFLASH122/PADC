#include <stdio.h>
 #include <omp.h> // OpenMP library
 void merge(int arr[], int low, int mid, int high) {
 int temp[high - low + 1]; // temporary array
    int left = low;           // starting index of left half
    int right = mid + 1;      // starting index of right half
 int index = 0;            
// index for the temporary array
 // Merging the two halves in sorted order
    while (left <= mid && right <= high) {
        if
 (arr[left] <= arr[right]) {
            temp[index++] = arr[left++];
        }
        }
    }
 else {
            temp[index++] = arr[right++];
 // Copying remaining elements of the left half, if any
    while (left <= mid) {
        temp[index++] = arr[left++];
    }
// Copying remaining elements of the right half, if any
    while (right <= high) {
        temp[index++] = arr[right++];
    }
 // Copying the sorted elements back to the original array
    for (int i = 0; i < index; i++) {
        arr[low + i] = temp[i];
    }
 }
 void mergeSort(int arr[], int low, int high) {
    if (low < high) {
        int mid = (low + high) / 2;
        //
 Parallel region for recursive merge sort calls
        #pragma omp parallel sections
        {
            #pragma omp section
            {
                mergeSort(arr, low, mid);      // Sort the left half
            }
            #pragma omp section
            {
                mergeSort(arr, mid + 1, high); // Sort the right half
            }
        }
 merge(arr, low, mid, high); // Merge the sorted halves
    }
 }
 int main() {
 int arr[] = {38, 27, 43, 3, 9, 82, 10};
    int n = sizeof(arr) / sizeof(arr[0]);
    // Set the number of threads
    omp_set_num_threads(4);
    mergeSort(arr, 0, n - 1);
 printf("Sorted array: \n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    return 0;
 }
