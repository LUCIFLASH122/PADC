 #include <stdio.h>
 #include <stdlib.h>
 #include <mpi.h>
 #define N 20
 #define MAX_NUM 100
void merge(int* left, int left_size, int* right, int right_size, int* result) {
 int i = 0, j = 0, k = 0;
 while (i < left_size && j < right_size) {
 if (left[i] < right[j]) {
 result[k++] = left[i++];
 } else {
 result[k++] = right[j++];
 }
 }
 while (i < left_size) {
 result[k++] = left[i++];
 }
 while (j < right_size) {
 result[k++] = right[j++];
 }
 }
 // Merge sort function
 void merge_sort(int* arr, int size) {
 if (size < 2) return;
 int mid = size / 2;
 merge_sort(arr, mid);
 merge_sort(arr + mid, size - mid);
 int* temp = (int*)malloc(size * sizeof(int));
 merge(arr, mid, arr + mid, size - mid, temp);
 for (int i = 0; i < size; i++) {
 arr[i] = temp[i];
 }
 free(temp);
 }
 int main(int argc, char** argv) {
 int rank, size;
 int arr[N];
 MPI_Init(&argc, &argv);
 MPI_Comm_rank(MPI_COMM_WORLD, &rank);
 MPI_Comm_size(MPI_COMM_WORLD, &size);
 if (rank == 0) {
 srand(time(NULL));
 for (int i = 0; i < N; i++) {
 arr[i] = rand() % MAX_NUM;
 }
printf("Original array: ");
 for (int i = 0; i < N; i++) {
 printf("%d ", arr[i]);
 }
 printf("\n");
 }
 int local_size = N / size;
 int* local_arr = (int*)malloc(local_size * sizeof(int));
 MPI_Scatter(arr, local_size, MPI_INT, local_arr, local_size, MPI_INT, 0, 
MPI_COMM_WORLD);
 merge_sort(local_arr, local_size);
 MPI_Gather(local_arr, local_size, MPI_INT, arr, local_size, MPI_INT, 0, 
MPI_COMM_WORLD);
 if (rank == 0) {
 merge_sort(arr, N);
 printf("Sorted array: ");
 for (int i = 0; i < N; i++) {
 printf("%d ", arr[i]);
 }
 printf("\n");
 }
 free(local_arr);
 MPI_Finalize();
 return 0;
 }
