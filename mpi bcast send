 #include <mpi.h>
 #include <stdio.h>
 int main(int argc, char *argv[]) {
 int rank, size, data;
 MPI_Init(&argc, &argv);
●
 ●
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    if (rank == 0) {
        data = 42; // Root process sets data
        double start_time = MPI_Wtime();
        // Using MPI_Send to send data to all other processes
        for (int i = 1; i < size; i++) {
            MPI_Send(&data, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
        }
        double end_time = MPI_Wtime();
        printf("MPI_Send time: %f seconds\n", end_time - start_time);
    } else {
        MPI_Recv(&data, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, 
MPI_STATUS_IGNORE);
        printf("Process %d received data %d using MPI_Send\n", rank, data);
    }
    // Synchronize before starting MPI_Bcast
    MPI_Barrier(MPI_COMM_WORLD);
    if (rank == 0) {
        data = 42; // Reset data in root process
        double start_time = MPI_Wtime();
        // Using MPI_Bcast to broadcast data from root to all processes
        MPI_Bcast(&data, 1, MPI_INT, 0, MPI_COMM_WORLD);
        double end_time = MPI_Wtime();
        printf("MPI_Bcast time: %f seconds\n", end_time - start_time);
    } else {
        MPI_Bcast(&data, 1, MPI_INT, 0, MPI_COMM_WORLD);
        printf("Process %d received data %d using MPI_Bcast\n", rank, data);
    }
    MPI_Finalize();
    return 0;
 }
