#include <mpi.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <math.h>
 void jacobi(int n, double *A, double *b, double *x, int max_iter, double tol) {
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    double *x_new = (double *)malloc(n * sizeof(double));
    double diff = tol + 1;
    int iter = 0;
    while (iter < max_iter && diff > tol) {
        diff = 0.0;
        for (int i = rank; i < n; i += size) {
            double sigma = 0.0;
            for (int j = 0; j < n; j++) {
                if (j != i)
                    sigma += A[i * n + j] * x[j];
            }
            x_new[i] = (b[i] - sigma) / A[i * n + i];
            double local_diff = fabs(x_new[i] - x[i]);
            if (local_diff > diff) diff = local_diff;
        }
 MPI_Allgather(MPI_IN_PLACE, 1, MPI_DOUBLE, x_new, 1, MPI_DOUBLE, 
MPI_COMM_WORLD);
        for (int i = 0; i < n; i++) x[i] = x_new[i];
 MPI_Allreduce(MPI_IN_PLACE, &diff, 1, MPI_DOUBLE, MPI_MAX, 
MPI_COMM_WORLD);
        iter++;
    }
 if (rank == 0) {
        printf("Converged after %d iterations with tolerance %f\n", iter, tol);
    }
    free(x_new);
 }
 int main(int argc, char *argv[]) {
 MPI_Init(&argc, &argv);
    int n = 4; // System size (example)
 double A[16] = {4, -1, 0, 0, -1, 4, -1, 0, 0, -1, 4, -1, 0, 0, -1, 3}; // Example 
matrix
    double b[4] = {15, 10, 10, 10};  // Example vector
    double x[4] = {0, 0, 0, 0};      // Initial guess
    jacobi(n, A, b, x, 1000, 1e-6);
 MPI_Finalize();
    return 0;
 }
