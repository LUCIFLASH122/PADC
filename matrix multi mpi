 #include <stdio.h>
 #include <stdlib.h>
 #include <mpi.h>
 #define N 4 // Define the size of the matrices (NxN)
 int main(int argc, char *argv[]) {
 int rank, size;
 int A[N][N], B[N][N], C[N][N] = {0}; // Matrices
    int local_A[N][N], local_C[N][N] = {0};
 MPI_Init(&argc, &argv);
 MPI_Comm_rank(MPI_COMM_WORLD, &rank);
 MPI_Comm_size(MPI_COMM_WORLD, &size);
    // Initialize matrices on the root process
 if (rank == 0) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                A[i][j] = i + j; // Example values, customize as needed
                B[i][j] = i - j;
            }
        }
    }
    // Broadcast matrix B to all processes
 MPI_Bcast(B, N * N, MPI_INT, 0, MPI_COMM_WORLD);
    // Scatter rows of matrix A to all processes
 MPI_Scatter(A, N * N / size, MPI_INT, local_A, N * N / size, MPI_INT, 0, 
MPI_COMM_WORLD);
    // Perform multiplication on the assigned rows
    for (int i = 0; i < N / size; i++) {
        for (int j = 0; j < N; j++) {
            local_C[i][j] = 0;
            for (int k = 0; k < N; k++) {
                local_C[i][j] += local_A[i][k] * B[k][j];
            }
        }
    }
    // Gather the result back to the root process
    MPI_Gather(local_C, N * N / size, MPI_INT, C, N * N / size, MPI_INT, 0, 
MPI_COMM_WORLD);
    // Display result on the root process
    if (rank == 0) {
        printf("Result Matrix C:\n");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                printf("%d ", C[i][j]);
            }
            printf("\n");
        }
    }
    MPI_Finalize();
    return 0;
 }
